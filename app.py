import streamlit as st

from model import KNK


@st.cache_data
def get_data(f, queries):
    st.write("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤...")
    knk_creator = KNK(queries_list=queries)
    st.write("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    st.write("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ö–ù–ö...")
    knk_df, new_df, full_char_list = knk_creator.create(f)
    st.write("–ì–æ—Ç–æ–≤–æ!")
    return knk_df, new_df, full_char_list


queries = ["–Ω–∞–≤—ã–∫–∏", "–∑–Ω–∞–Ω–∏—è", "–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", "–¥–æ–ª–∂–Ω–æ—Å—Ç–∏", "Soft Skills"]

st.title("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π üíº")
file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", type="docx")

if file:
    with st.status("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
        knk_df, new_df, full_char_list = get_data(file, queries)
    if knk_df is not None:
        st.header("–î–æ–ª–∂–Ω–æ—Å—Ç—å")
        df_position = knk_df[knk_df.columns[:3]].iloc[[0]]
        st.dataframe(df_position)

        soft_skills = [
            item for item in knk_df["–°–æ—Ñ—Ç-—Å–∫–∏–ª–ª—ã"].dropna().values if len(item) > 0
        ]
        if len(soft_skills) != 0:
            st.header("–°–æ—Ñ—Ç-—Å–∫–∏–ª–ª—ã")
            s = ""
            for skill in soft_skills:
                s += "- " + skill + "\n"
            st.markdown(s)

        st.header("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
        st.dataframe(new_df)

        st.header("–ö–ù–ö")
        main_comps = [item.name for item in full_char_list]
        selected_mc_str = st.selectbox(
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
            main_comps,
            index=None,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é",
        )
        if selected_mc_str:
            selected_item = list(
                filter(lambda x: x.name == selected_mc_str, full_char_list)
            )[0]
            comps = [item.name for item in selected_item.child]
            selected_c_str = st.selectbox(
                "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", comps, index=None, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é"
            )
            if selected_c_str:
                selected_item = list(
                    filter(lambda x: x.name == selected_c_str, selected_item.child)
                )[0]
                knowledge = [item.name for item in selected_item.child]
                if len(knowledge) != 0:
                    selected_know_str = st.selectbox(
                        "–ó–Ω–∞–Ω–∏—è", knowledge, index=None, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–Ω–∏–µ"
                    )
                    if selected_know_str:
                        selected_item = list(
                            filter(
                                lambda x: x.name == selected_know_str,
                                selected_item.child,
                            )
                        )[0]
                        skills = selected_item.child
                        if len(skills) != 0:
                            st.text("–ù–∞–≤—ã–∫–∏")
                            s = ""
                            for skill in skills:
                                s += "- " + skill + "\n"
                            st.markdown(s)
                        else:
                            st.markdown("**–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —É–º–µ–Ω–∏—è**")
                else:
                    st.markdown("**–î–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞–Ω–∏–π**")
